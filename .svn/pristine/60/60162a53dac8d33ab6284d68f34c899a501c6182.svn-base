using System;
using BP.Domain.Abstract;
using BP.Domain.Entities;

namespace BP.Domain.Concrete
{
    public class UnitOfWork: IUnitOfWork
    {

        private readonly BPContext _context = new BPContext();
        private GenericRepository<Organization> _organizations;
        private AccountRepository _accountRepository;
        private IRepository<Milestone> _milestones;

        public IRepository<Organization> Organizations
        {
            get {
                return _organizations ??
                       (_organizations = new GenericRepository<Organization>(_context));
            }
        }

        public IAccountRepository Accounts
        {
            get
            {
                return _accountRepository ??
                       (_accountRepository = new AccountRepository(_context));
            }
        }
        
        public void Commit()
        {
            _context.SaveChanges();
        }

        #region Disposable
        private bool _disposed;

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing) _context.Dispose();
            }
            _disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        } 
        #endregion

        
        public IRepository<Milestone> Milestones
        {
            get
            {
                return _milestones ??
                       (_milestones = new GenericRepository<Milestone>(_context));
            }
        }

       
 
    }
}
